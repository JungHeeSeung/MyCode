

==========================
 Fri Mar  8 11:31:10 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include"save.h"

int main()
{
	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:43:07 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;

int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지);
	std::sort(begin(a), end(a));
	for (size_t i = 0; i < sizeof(a); i++)
	{
		cout << a[i] << ", ";
	}
	 
	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:43:40 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;

int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지);
	std::sort(begin(a), end(a));
	for (int d : a)
	{
		cout << a[d] << ", ";
	}
	 
	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:44:24 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;

int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지);
	std::sort(begin(a), end(a));
	for (int d : a)
	{
		cout << d << ", ";
	}
	 
	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:56:02 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;

bool how(int, int);

bool how(int a, int b) {
	return a < b;
}


int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), how);

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:56:08 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;

bool how(int, int);

bool how(int a, int b) {
	return a > b;
}


int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), how);

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 11:58:10 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.


//===================================


#include<iostream>
#include<algorithm>
#include"save.h"

using namespace std;




int main()
{
	// 정수 10개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a > b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:08:31 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid;
	default_random_engine dre;


	for (int i = 0; i < 1000; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	//std::sort( begin(a), end(a), [](int a, int b){
	//	return a > b;
	//});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:08:44 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid;
	default_random_engine dre;


	for (int i = 0; i < 1000; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	//std::sort( begin(a), end(a), [](int a, int b){
	//	return a > b;
	//});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:09:26 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid(0,10000);
	default_random_engine dre;


	for (int i = 0; i < 1000; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	//std::sort( begin(a), end(a), [](int a, int b){
	//	return a > b;
	//});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:10:01 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid(0,10000);
	default_random_engine dre;


	for (int i = 0; i < 1000; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:10:36 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid(0,1000);
	default_random_engine dre;


	for (int i = 0; i < 1000; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:13:33 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;



#define num_of_a 1000
int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[num_of_a];

	uniform_int_distribution<> uid(0,1000);
	default_random_engine dre;


	for (int i = 0; i < num_of_a; i++){
		//a[i] = 분포(엔진);
		a[i] = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:14:28 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;



#define num_of_a 1000

int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[num_of_a];

	uniform_int_distribution<> uid(0,1000);
	default_random_engine dre;


	for (int& d : a){
		//a[i] = 분포(엔진);
		d = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Fri Mar  8 12:16:01 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	int a[1000];

	uniform_int_distribution<> uid(0,1000);
	default_random_engine dre;


	for (int& d : a){
		//a[i] = 분포(엔진);
		d = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;
	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}



==========================
 Tue Mar 12 13:39:33 2019
==========================

//===================================

//2019 STL 3.8 금23		(1주 2일)
//
// - 강의 내용을 저장하자
//		저장하는 함수를 만든다.
// - 많은 수의 자료를 다루는 것을 생각해 보자
//		많은 수를 어떻게 다루는가?
//		자료는 어디에 있는가?
//		- 정수 1000만개를 랜덤하게 생성한다.
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<algorithm>
#include<random>
#include"save.h"

using namespace std;




int main()
{
	// 정수 1000개를 생성하여 정렬해 보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};	//unitform initializer
	//int a[1000000];	

	uniform_int_distribution<> uid(0,1000);
	default_random_engine dre;


	for (int& d : a){
		//a[i] = 분포(엔진);
		d = uid(dre);
	}

	//sort(어디부터, 어디까지, 어떻게(처리 할 함수의 시작번지));
	std::sort( begin(a), end(a), [](int a, int b){
		return a < b;
	});

	for (int d : a) //????
		cout << d << ", ";
	cout << endl;

	// Ascending order - 오름차순
	// Descending order - 내림차순


	save("소스1.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}

// main 안에 있는 a[10000] 변수는 지역 변수이다. 이 프로그램이 돌아가려면 전역으로 뺀다.

==========================
 Tue Mar 12 14:08:38 2019
==========================

//===================================

//2019 STL 3.12 금23		(2주 1일)
//
//		- 정렬하여 파일에 기록한다.
//		- binary I/O 
//

//===================================


#include<iostream>
#include<random>
#include<algorithm>
#include"save.h"

//using namespace std;


int main()
{
	// 정수 만개를 생성하여 정렬 후 파일에 기록하라

	int* num = new int[1'0000];
	//std::sort(num, num + 10000);

	std::uniform_int_distribution<> uid;
	std::default_random_engine dre;

	for (size_t i = 0; i < 10000; i++)
		num[i] = uid(dre);

	std::sort(num, num + 10000);

	//정렬된 a 를 파일에 써 보자


	save("소스3.cpp");	// 안의 문자열은 전역변수라서 data 세그먼트에 들어간다.
}

